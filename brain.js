// –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∏–Ω—Ç—É–∏—Ü–∏—è –≥–æ–≤–æ—Ä–∏—Ç: "–û—Å—Ç–∞–≤–∏—Ç—å!" - —Ö—Ä–µ–Ω –∑–Ω–∞–µ—Ç –ø–æ—á–µ–º—É
const brain = function(msg) {
/*  msg - —ç—Ç–æ –æ–±—ä–µ–∫—Ç –≤–∏–¥–∞: {
    t:  new Date(),
    id: up.user_id,
    n:  peerName,
    m:  up.message
  }*/
  main(msg)
  console.log(msg)
  console.log('--------------------')
}
module.exports = brain // –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞—à –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ –≤–Ω–µ—à–Ω–∏–π –º–∏—Ä

// –ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
function main(msg) {
  let out = global.out // –ù–∞—à–∏ –∏—Å—Ö–æ–¥—è—â–∏–µ

  if (msg.match('–ß–∞—Ç –ª–∞–≥–µ—Ä—è')) {
    out.push('üèò–í –ù—å—é-–†–∏–Ω–æ')
    return
  }

  if (msg.match('—É—é—Ç–Ω—ã–π –≥–æ—Ä–æ–¥ –†–∏–Ω–æ,')) {
    out.push(
      '/eat1', '/eat2', '/eat2',
      '/eq_480', '/eq_472', '/eq_43',
      'üë£–ü—É—Å—Ç–æ—à—å'
    )
    return
  }

  if (msg.match('–≤ —ç—Ç–æ—Ç —Ä–∞–∑ —É–∂–µ –±—É–∫–≤–∞–ª—å–Ω–æ.')) {
    out.push('‚õ∫Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≥–µ—Ä—å')
    return
  }

  if (
    msg.match('–¢–≤–æ–π –ø—É—Ç—å –ø—Ä–µ–≥—Ä–∞–¥–∏–ª –∏—Å–ø–æ–ª–∏–Ω—Å–∫–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –º–æ–Ω—Å—Ç—Ä.')
    || msg.match('–≤ —ç—Ç–æ—Ç —Ä–∞–∑ —Ç—ã –Ω–µ –ø–æ–ª—É—á–∏–ª —Å–¥–∞—á–∏.')
  ) {
    out.push('‚öîÔ∏è–ê—Ç–∞–∫–æ–≤–∞—Ç—å')
    return
  }

  if (
    msg.match('üìØüö∑ ‚ù§Ô∏è')
    || msg.match('üìØ‚ù§Ô∏è')
  ) {
    out.push('–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ')
    return
  }

  if (msg.match('üìØüö∑ –ë—ç—Ç-–ø–µ—â–µ—Ä–∞')) {
    out.push('/eq_480', '–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ')
    return
  }

  if (
    msg.match('–¢—ã –Ω–µ —Å–º–æ–∂–µ—à—å —É–≤–∏–ª—å–Ω—É—Ç—å –æ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞')
    || msg.match('–¢–µ–±–µ –Ω–µ —É–π—Ç–∏ –æ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞')
    || msg.match('–í–æ –≤—Ä–µ–º—è –≤—ã–ª–∞–∑–∫–∏ –Ω–∞ —Ç–µ–±—è –Ω–∞–ø–∞–ª')
  ) {
    out.push('‚öîÔ∏è–î–∞—Ç—å –æ—Ç–ø–æ—Ä')
    return
  }

  // –õ–æ–≤–∏–º –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂
  let parse
  if (parse = msg.match(/üö∑[\s\S]*üë£(\d+)–∫–º/))
    if (actPath(parse[1], false)) return
  if (parse = msg.match(/üö∑.*(\d+)\s?–∫–º/))
    if (actPath(parse[1], false)) return
  if (parse = msg.match(/üë£(\d+)\s?–∫–º/))
    if(actPath(parse[1])) return

  if (msg.match('–¢—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª –±—Ä–æ–¥—è—á–µ–≥–æ —Ç–æ—Ä–≥–æ–≤—Ü–∞,')) {
    out.push('/buy_5i', '/view')
    return
  }

  if (
    msg.match('–¢—ã –æ—Ü–µ–Ω–∏–ª –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –≤–æ–∫—Ä—É–≥.')
    || msg.match('–¢—ã –æ–≥–ª—è–¥–µ–ª—Å—è –≤–æ–∫—Ä—É–≥ —Å–µ–±—è.')
    || msg.match('–†–µ–π–¥ –≤ 01:00')
    || msg.match('–†–µ–π–¥ –≤ 9:00')
    || msg.match('–†–µ–π–¥ –≤ 17:00')
  ) {
    out.push('üë£–ò–¥—Ç–∏ –¥a–ª—å—à–µ')
    return
  }

  if (
    msg.match('/view')
    || msg.match('–¢—ã –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É!')
    || msg.match('–¢—ã –≥–æ—Ç–æ–≤ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ü—É—Å—Ç–æ—à—å!')
    || msg.match(' –∏ –µ–≥–æ')
    || msg.match('—Å –≤–∏–¥—É –∑–≤–µ—Ä—å–∫–∞. –≠—Ç–æ –±—ã–ª –∫–æ—Ç,')
    || msg.match('‚Äî –ö–∏—Å-–∫–∏—Å-–∫–∏—Å..')
    || msg.match('\nüêê')
    || msg.match('\sü§ò')
    || msg.match('(–±–µ–∑ –±–∞–Ω–¥—ã)')
    || msg.match('–≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ\n üï≥+')
    || msg.match('–¥–∞—Ç–∞—Ü–µ–Ω—Ç—Ä\n üï≥+')
  ) {
    out.push('/view')
    return
  }

  if (msg.match('–¢—ã –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–µ–Ω.')) {
    out.push('/myfood')
    return
  }
  if (parse = msg.match(/\/use_1[0-2]\d/g)) {
    out.push(parse[0])
    return
  }

  // –õ–æ–≤–∏–º –æ—á–∏—Å—Ç–∫—É
  if (msg.match('/dl_')) {
    actClean(msg)
    return
  }
  if (parse = msg.match(/\/del_\d+/)) {
    out.push(parse[0])
    return
  }
}

// --------------------
// –í–µ—Ç–∫–∞ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂–∞
function actPath(parse, light=true) {
  let out = global.out // –ù–∞—à–∏ –∏—Å—Ö–æ–¥—è—â–∏–µ
  let x = Number(parse)

  if (light) {
    switch (x) {
      case 2:
        out.push('üë£–ò–¥—Ç–∏ –¥a–ª—å—à–µ')
        return true
      case 11:
        out.push('–°—Ç–∞—Ä–∞—è —à–∞—Ö—Ç–∞', '–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ')
        return true
//      case 22:
//        out.push('üö∑–í –¢–µ–º–Ω—É—é –∑–æ–Ω—É')
//        return true
      case 27:
        out.push('üë£–ò–¥—Ç–∏ –¥a–ª—å—à–µ')
        return true
      case 40:
        out.push('/eq_54', '/eq_73', 'üë£–ò–¥—Ç–∏ –¥a–ª—å—à–µ')
        return true
      case 45:
        out.push('üåÅ–í—ã—Å–æ–∫–∏–π –•—Ä–æ—Ç–≥–∞—Ä', '–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ')
        return true
//      case 50:
//        out.push('üõë–†—É–∏–Ω—ã –ì–µ–∫—Å–∞–≥–æ–Ω–∞', '–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ')
//        return true
      case 51:
        out.push('üõè–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–∏–≤–∞–ª', '/deeprest')
        return true
//      case 52:
//        out.push('üö∑–í –¢–µ–º–Ω—É—é –∑–æ–Ω—É')
//        return true
      case 68: case 69:
        out.push('‚õ∫Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≥–µ—Ä—å')
        return true
      default: return false // –£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω
    }
  } else { // –ï—Å–ª–∏ —Ç–µ–º–Ω–æ
    switch (x) {
      case 23:
        out.push('üöΩ–°—Ç–æ—á–Ω–∞—è —Ç—Ä—É–±–∞', '–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ')
        return true
      case 34:
        out.push('ü¶á–ë—ç—Ç-–ø–µ—â–µ—Ä–∞', '–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ', '/eq_53')
        return true
      case 56:
        out.push('üî¨–ù–∞—É—á–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å', '–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ')
        return true
//      case 63:
//        out.push('/voevat_suda', '/stealth')
//        return true
      default: return false // –£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω
    }
  }
}

// --------------------
// –í–µ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏
function actClean(msg) {
  let out = global.out // –ù–∞—à–∏ –∏—Å—Ö–æ–¥—è—â–∏–µ
  const badGoods = [
   'BFGzzv-4000',
    '–ë–æ–µ–≤–∞—è –±—Ä–æ–Ω—è',
    '–ê—Ä–º–∞–≥–µ–¥–¥–µ—Ü',
    '–ü–æ—Ç—Ä–æ—à–∏—Ç–µ–ª—å',
    '–ë—Ä–æ–Ω—è –±—Ä–∞—Ç—Å—Ç–≤–∞',
    '–ö–∏–Ω–∂–∞–ª',
    '–ö–æ–∂–∞–Ω–Ω—ã–π –Ω–∞–≥—Ä—É–¥–Ω–∏–∫',
    '–ö–æ–∂–∞–Ω—ã–π –∂–∏–ª–µ—Ç',
    '–¢–∏—Ç–∞–Ω–æ–≤—ã–µ —â–∏—Ç–∫–∏',
    '–ì—Ä–∞–≤–∏–ø—É—à–∫–∞',
    '–ú–∞—á–µ—Ç–µ',
    '–®–∏–ø–∞—Å—Ç–∞—è –±–∏—Ç–∞',
    '–õ–∞–∑–µ—Ä–Ω—ã–π —Ç–µ—Å–∞–∫',
    '–®–ª—è–ø–∞ –º–∏–Ω–∏—Ç–º–µ–Ω–∞',
    '–ú–æ—Ç–æ-–∑–∞—â–∏—Ç–∞',
    '–ü–ª–æ—Ç–Ω—ã–π –∫–∞–ø—é—à–æ–Ω',
    '–ü—Ä–æ—Ç–∏–≤–æ–≥–∞–∑',
    '–°—É–ø–µ—Ä–º–æ–ª–æ—Ç',
    '–§–∞–ª–º–µ—Ä—Å–∫–∏–π –∫–ª–∏–Ω–æ–∫',
    '–§—É—Å—Ä–æ–Ω–µ—Ç',
    '–ö–æ–ø—å–µ',
    '–£—à–∞–Ω–∫–∞',
    '–í—è–∑–∞–Ω–∞—è —à–∞–ø–∫–∞',
    '–•–ª—ã—Å—Ç',
    '–ö–∏—Å—Ç–µ–Ω—å',
    '–≠–ª–µ–∫—Ç—Ä–æ–º–µ—á'
  ]

  let parse
  for (let i=0; i<badGoods.length; i++) {
    parse = msg.match(new RegExp(badGoods[i]+'.*(\\/dl_\\d+)'))
    if (parse) break
  }
  if (parse) out.push(parse[1])
}

