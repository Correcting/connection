// –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∏–Ω—Ç—É–∏—Ü–∏—è –≥–æ–≤–æ—Ä–∏—Ç: "–û—Å—Ç–∞–≤–∏—Ç—å!" - —Ö—Ä–µ–Ω –∑–Ω–∞–µ—Ç –ø–æ—á–µ–º—É
const brain = function(msg) {
/*
msg - —ç—Ç–æ –æ–±—ä–µ–∫—Ç –≤–∏–¥–∞: {
    t:  new Date() –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –¢–ì,
    id: –¢–ì id —é–∑–µ—Ä–∞,
    n:  –Ω–∞—à–µ –∏–º—è —é–∑–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ sec.ids,
    m:  —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
  }
*/
  if (msg.n == 'peer') main(msg) // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ "peer"
  if (msg.n == 'info') raid(msg) // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "info"
  console.log(msg)
  console.log('--------------------')
}
module.exports = brain // –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞—à –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ –≤–Ω–µ—à–Ω–∏–π –º–∏—Ä

// –û—Ç–ø—Ä–∞–≤–∫–∞
function send(name, msg) {
  return global.out.push({t: 's', n: name, m: msg})
}

// –ü–µ—Ä–µ—Å—ã–ª–∫–∞
function fwd(msgId) {
  return global.out.push({t: 'f', id: msgId})
}

// --------------------
// –ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä—ã
function main(msg) {
  if (msg.m.match('–ß–∞—Ç –ª–∞–≥–µ—Ä—è')) {
    send('peer', 'üèò–í –ù—å—é-–†–∏–Ω–æ')
    return
  }

  if (msg.m.match('—É—é—Ç–Ω—ã–π –≥–æ—Ä–æ–¥ –†–∏–Ω–æ,')) {
    send('peer', '/eat1')
    send('peer', '/eat1')
    send('peer', '/eat1')
    send('peer', '/eq_480')
    send('peer', '/eq_472')
    send('peer', '/eq_43')
    send('peer', 'üë£–ü—É—Å—Ç–æ—à—å')
    return
  }

  if (msg.m.match('–≤ —ç—Ç–æ—Ç —Ä–∞–∑ —É–∂–µ –±—É–∫–≤–∞–ª—å–Ω–æ.')) {
    send('peer', '‚õ∫Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è')
    send('peer', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≥–µ—Ä—å')
    return
  }

  if (
    msg.m.match('–¢–≤–æ–π –ø—É—Ç—å –ø—Ä–µ–≥—Ä–∞–¥–∏–ª –∏—Å–ø–æ–ª–∏–Ω—Å–∫–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –º–æ–Ω—Å—Ç—Ä.')
    || msg.m.match('–≤ —ç—Ç–æ—Ç —Ä–∞–∑ —Ç—ã –Ω–µ –ø–æ–ª—É—á–∏–ª —Å–¥–∞—á–∏.')
  ) {
    send('peer', '‚öîÔ∏è–ê—Ç–∞–∫–æ–≤–∞—Ç—å')
    return
  }

  if (
    msg.m.match('üìØüö∑ ‚ù§Ô∏è')
    || msg.m.match('üìØ‚ù§Ô∏è')
  ) {
    send('peer', '–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ')
    return
  }

  if (msg.m.match('üìØüö∑ –ë—ç—Ç-–ø–µ—â–µ—Ä–∞')) {
    send('peer', '/eq_480')
    send('peer', '–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ')
    return
  }

  if (
    msg.m.match('–¢—ã –Ω–µ —Å–º–æ–∂–µ—à—å —É–≤–∏–ª—å–Ω—É—Ç—å –æ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞')
    || msg.m.match('–¢–µ–±–µ –Ω–µ —É–π—Ç–∏ –æ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞')
    || msg.m.match('–í–æ –≤—Ä–µ–º—è –≤—ã–ª–∞–∑–∫–∏ –Ω–∞ —Ç–µ–±—è –Ω–∞–ø–∞–ª')
  ) {
    send('peer', '‚öîÔ∏è–î–∞—Ç—å –æ—Ç–ø–æ—Ä')
    return
  }

  // –õ–æ–≤–∏–º –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂
  let parse
  if (parse = msg.m.match(/üö∑[\s\S]*üë£(\d+)–∫–º/))
    if (actPath(parse[1], false)) return
  if (parse = msg.m.match(/üö∑.*(\d+)\s?–∫–º/))
    if (actPath(parse[1], false)) return
  if (parse = msg.m.match(/üë£(\d+)\s?–∫–º/))
    if(actPath(parse[1])) return

  if (msg.m.match('–¢—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª –±—Ä–æ–¥—è—á–µ–≥–æ —Ç–æ—Ä–≥–æ–≤—Ü–∞,')) {
    send('peer', '/buy_5i')
    send('peer', '/view')
    return
  }

  if (
    msg.m.match('–¢—ã –æ—Ü–µ–Ω–∏–ª –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –≤–æ–∫—Ä—É–≥.')
    || msg.m.match('–¢—ã –æ–≥–ª—è–¥–µ–ª—Å—è –≤–æ–∫—Ä—É–≥ —Å–µ–±—è.')
    || msg.m.match('–†–µ–π–¥ –≤ 01:00')
    || msg.m.match('–†–µ–π–¥ –≤ 9:00')
    || msg.m.match('–†–µ–π–¥ –≤ 17:00')
  ) {
    send('peer', 'üë£–ò–¥—Ç–∏ –¥a–ª—å—à–µ')
    return
  }

  if (
    msg.m.match('/view')
    || msg.m.match('–¢—ã –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É!')
    || msg.m.match('–¢—ã –≥–æ—Ç–æ–≤ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ü—É—Å—Ç–æ—à—å!')
  ) {
    send('peer', '/view')
    return
  }

  if (msg.m.match('–¢—ã –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–µ–Ω.')) {
    send('peer', '/myfood')
    return
  }
  
  if (parse = msg.m.match(/\/use_1[0-2]\d/g)) {
    send('peer', parse[0])
    return
  }

  // –õ–æ–≤–∏–º –æ—á–∏—Å—Ç–∫—É
  if (msg.m.match(/(–ü–æ–ª—É—á–µ–Ω–æ:)|(–ù–∞–π–¥–µ–Ω–æ:)/)) {
    foundShit(msg)
    return
  }
     
  if (msg.m.match('/dl_')) {
    grabShit(msg)
    return
  }
  
  if (parse = msg.m.match(/\/del_\d+/)) {
    send('peer', parse[0])
    return
  }
}

// –†–æ—É—Ç–µ—Ä —Ä–µ–π–¥–æ–≤–æ–π –∑–∞–ª—É–ø—ã
function raid(msg) {
  if (msg.m.match(/‚õ∫Ô∏è\s–õ–∞–≥–µ—Ä—è.*üìç\s(\d+)–∫–º:/)) {
    send('peer', ' _ ')
    return
  }
  
  if (parse = msg.m.match(/\/del_\d+/)) {
    send('peer', parse[0])
    return
  }
}

// --------------------
// –í–µ—Ç–∫–∞ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂–∞
function actPath(parse, light=true) {
  let x = Number(parse)

  if (light) {
    switch (x) {
      case 2:
        send('peer', 'üë£–ò–¥—Ç–∏ –¥a–ª—å—à–µ')
        return true
      case 11:
        send('peer', '–°—Ç–∞—Ä–∞—è —à–∞—Ö—Ç–∞')
        send('peer', '–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ')
        return true
//      case 22:
//        send('peer', 'üö∑–í –¢–µ–º–Ω—É—é –∑–æ–Ω—É')
//        return true
      case 27:
        send('peer', 'üë£–ò–¥—Ç–∏ –¥a–ª—å—à–µ')
        return true
      case 40:
        send('peer', '/eq_54')
        send('peer', '/eq_73')
        send('peer', 'üë£–ò–¥—Ç–∏ –¥a–ª—å—à–µ')
        return true
      case 45:
        send('peer', 'üåÅ–í—ã—Å–æ–∫–∏–π –•—Ä–æ—Ç–≥–∞—Ä')
        send('peer', '–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ')
        return true
//      case 50:
//        send('peer', 'üõë–†—É–∏–Ω—ã –ì–µ–∫—Å–∞–≥–æ–Ω–∞')
//        send('peer', '–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ')
//        return true
      case 51:
        send('peer', 'üõè–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–∏–≤–∞–ª')
        send('peer', '/deeprest')
        return true
//      case 52:
//        send('peer', 'üö∑–í –¢–µ–º–Ω—É—é –∑–æ–Ω—É')
//        return true
      case 68: case 69:
        send('peer', '‚õ∫Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è')
        send('peer', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∞–≥–µ—Ä—å')
        return true
      default: return false // –£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω
    }
  } else { // –ï—Å–ª–∏ —Ç–µ–º–Ω–æ
    switch (x) {
      case 23:
        send('peer', 'üöΩ–°—Ç–æ—á–Ω–∞—è —Ç—Ä—É–±–∞')
        send('peer', '–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ')
        return true
      case 34:
        send('peer', 'ü¶á–ë—ç—Ç-–ø–µ—â–µ—Ä–∞')
        send('peer', '–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ')
        send('peer', '/eq_53')
        return true
      case 56:
        send('peer', 'üî¨–ù–∞—É—á–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å')
        send('peer', '–î–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ')
        return true
//      case 63:
//        send('peer', '/voevat_suda')
//        send('peer', '/stealth')
//        return true
      default: return false // –£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω
    }
  }
}

// --------------------
// –í–µ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏
const badGoods = [
  'BFGzzv-4000',
  '–ë–æ–µ–≤–∞—è –±—Ä–æ–Ω—è',
  '–ê—Ä–º–∞–≥–µ–¥–¥–µ—Ü',
  '–ü–æ—Ç—Ä–æ—à–∏—Ç–µ–ª—å',
  '–ë–æ–µ–≤–∞—è –±—Ä–æ–Ω—è',
  '–ë—Ä–æ–Ω—è –±—Ä–∞—Ç—Å—Ç–≤–∞',
  '–ö–∏–Ω–∂–∞–ª',
  '–ö–æ–∂–∞–Ω–Ω—ã–π –Ω–∞–≥—Ä—É–¥–Ω–∏–∫',
  '–ö–æ–∂–∞–Ω—ã–π –∂–∏–ª–µ—Ç',
  '–¢–∏—Ç–∞–Ω–æ–≤—ã–µ —â–∏—Ç–∫–∏',
  '–ì—Ä–∞–≤–∏–ø—É—à–∫–∞',
  '–ú–∞—á–µ—Ç–µ',
  '–®–∏–ø–∞—Å—Ç–∞—è –±–∏—Ç–∞',
  '–õ–∞–∑–µ—Ä–Ω—ã–π —Ç–µ—Å–∞–∫',
  '–®–ª—è–ø–∞ –º–∏–Ω–∏—Ç–º–µ–Ω–∞',
  '–ú–æ—Ç–æ-–∑–∞—â–∏—Ç–∞',
  '–ü–ª–æ—Ç–Ω—ã–π –∫–∞–ø—é—à–æ–Ω',
  '–ü—Ä–æ—Ç–∏–≤–æ–≥–∞–∑',
  '–°—É–ø–µ—Ä–º–æ–ª–æ—Ç',
  '–§–∞–ª–º–µ—Ä—Å–∫–∏–π –∫–ª–∏–Ω–æ–∫',
  '–§—É—Å—Ä–æ–Ω–µ—Ç',
  '–ö–æ–ø—å–µ',
  '–£—à–∞–Ω–∫–∞',
  '–í—è–∑–∞–Ω–∞—è —à–∞–ø–∫–∞',
  '–•–ª—ã—Å—Ç',
  '–ö–∏—Å—Ç–µ–Ω—å',
  '–≠–ª–µ–∫—Ç—Ä–æ–º–µ—á'
]

function foundShit(msg) {
  let parse
  for (let i=0; i<badGoods.length; i++) {
    parse = msg.m.match(new RegExp('(–ü–æ–ª—É—á–µ–Ω–æ:)|(–ù–∞–π–¥–µ–Ω–æ:).*'+badGoods[i], 's'))
    if (parse) break
  }
  if (parse) send('peer', '/cstock')
}

function grabShit(msg) {
  let parse
  for (let i=0; i<badGoods.length; i++) {
    parse = msg.m.match(new RegExp(badGoods[i]+'.*(\\/dl_\\d+)'))
    if (parse) break
  }
  if (parse) send('peer', parse[1])
}
